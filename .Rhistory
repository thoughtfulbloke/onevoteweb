yfrombottomleft= c(lmline$coefficients[1] + 1972 * lmline$coefficients[2] - 2*lmsd, lmline$coefficients[1] + 1972 * lmline$coefficients[2] + 2*lmsd, lmline$coefficients[1] + 2014 * lmline$coefficients[2] + 2*lmsd, lmline$coefficients[1] + 2014 * lmline$coefficients[2] - 2*lmsd)
plot.new()
polygon(xfrombottonleft, yfrombottomleft, col="#00000011", border="#00000011", xlim=c(1973,2013), ylim=c(-0.3,0.9), ylab="Global temperature anomaly", xlab="Year", frame.plot=F)
plot(NA,NA, col="red", xlim=c(1973,2013), ylim=c(-0.3,0.9), pch=19, ylab="Global temperature anomaly", xlab="Year", frame.plot=F)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("xlsx")
con = url("http://biostat.jhsph.edu/~jleek/contact.html ")
htmlCode = readLines(con)
close(con)
linelen = sapply(htmlCode, nchars)
linelen = sapply(htmlCode, FUN=nchars)
linelen = sapply(htmlCode, FUN=nchar)
linelin
linelen
linelen[c(10,20,30,100)]
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
system("java -version")
print(sum(x*y)/sum(x*x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x-1)
print(fit)
plot(x,y, xlim=c(0,0.73))
abline(fit)
abline(h=mean(y))
abline(v=mean(x))
print(sum(x*y)/sum(x*x))
data(mtcars)
str(mtcars)
data(mtcars)
fit <- lm(mtcars$mpg ~mtcars$wt)
print(fit)
y= c(2,4,6,8,10)
x= c(1,2,3,4,5)
cor(x,y)
1.5 * 0.4
normx= (x-mean(x))/sd(x)
#q6
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
#by hand
normx= (x-mean(x))/sd(x)
print(normx[1])
normx2 = scale(x)
print(normx2[1])
fit <- lm(y ~ x)
fit
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
tmu= seq(from=0.560, to=0.580, by=.0001)
for (mu in tmu){
lsq = sum(((x-mu)^2))
print(paste(mu,lsq))
}
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
str(fit)
beta1 <- fit$coefficients[2]
beta1
fit2 <- lm(x ~ y)
yshapesymbol1 <- fit2$coefficients[2]
yshapesymbol1
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
beta1 <- fit$coefficients[2]
fit2 <- lm(x ~ y)
yshapesymbol1 <- fit2$coefficients[2]
print(beta1/yshapesymbol1)
for (i in 1:10){
x <- rnorm(20)
y <- x * rnorm(1)
fit <- lm(y ~ x)
beta1 <- fit$coefficients[2]
fit2 <- lm(x ~ y)
yshapesymbol1 <- fit2$coefficients[2]
print(beta1/yshapesymbol1)
}
but lets check
for (i in 1:10){
x <- rnorm(20)
y <- x * rnorm(1)
fit <- lm(y ~ x)
beta1 <- fit$coefficients[2]
fit2 <- lm(x ~ y)
yshapesymbol1 <- fit2$coefficients[2]
print("-----")
print(x)
print(y)
print(beta1/yshapesymbol1)
}
for (i in 1:10){
x <- rnorm(20)
y <- x * rnorm(1)
fit <- lm(y ~ x)
beta1 <- fit$coefficients[2]
fit2 <- lm(x ~ y)
yshapesymbol1 <- fit2$coefficients[2]
print(paste(beta1,yshapesymbol1, beta1/yshapesymbol1))
}
---
---
load(url("http://www.openintro.org/stat/data/evals.RData"))
summary(evals)
hist(score)
hist(evals$score)
length(evals$score[evals$score < 3]
)
plot(jitter(evals$score)) ~ jitter(evals$bty_avg))
plot(jitter(evals$score) ~ jitter(evals$bty_avg))
smoothScatter(evals$score ~ evals$bty_avg)
m_bty <- lm(evals$score ~ evals$bty_avg)abline(m_bty)
smoothScatter(evals$score ~ evals$bty_avg)m_bty <- lm(evals$score ~ evals$bty_avg)abline(m_bty)
smoothScatter(evals$bty_avg, evals$score)
m_bty <- lm(evals$score ~ evals$bty_avg)
abline(m_bty)
str(m_bty)
plot(jitter(m_bty$residuals) ~ jitter(evals$bty_avg))
plot(evals$bty_avg ~ evals$bty_f1lower)cor(evals$bty_avg, evals$bty_f1lower)
plot(evals$bty_avg ~ evals$bty_f1lower)
plot(evals$bty_avg ~ evals$bty_f1lower)cor(evals$bty_avg, evals$bty_f1lower)
cor(evals$bty_avg, evals$bty_f1lower)
plot(evals[, 13:19])
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)summary(m_bty_gen)
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
multiLines(m_bty_gen)
m_bty_rank <- lm(score ~ bty_avg + gender + rank, data = evals)
summary(m_bty_rank)
m_bty_rank <- lm(score ~ bty_avg + rank, data = evals)summary(m_bty_rank)
m_bty_rank <- lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_rank)
multiLines(m_bty_rank)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval + cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval + cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval + cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval + cls_students + cls_level + cls_profs + cls_credits , data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval + cls_students + cls_level  + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval  + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~  ethnicity + gender + language + age + cls_perc_eval + cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval + cls_students + cls_level  + cls_credits + bty_avg, data = evals)
summary(m_full)
dbinom(1,5,0.2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
print(fit)
fit <- lm(x ~ y)
print(fit)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(x ~ y)
print(fit)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
print(fit)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
print(fit)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x-1)
print(fit)
sx = scale(x)
sy = scale(y)
fit <- lm(sy ~ sx)
print(fit)
data(mtcars)
table(mtcars$am)
plot(summary(mtcars$am))
stripchart(mtcars$mpg~mtcars$am, method="stack",pch=c(19),col=c("blue","green"),
xlab="Number of Cylinders",
ylab="Miles Per Gallon (MPG)",
main="Miles Per Gallon vs. Number of Cylinders",
offset=0.5)
stripchart(mtcars$mpg~mtcars$am, method="stack",pch=c(19),col=c("blue","green"), xlab="Miles Per Gallon (MPG)", ylab="Transmission",  main="Miles Per Gallon vs. Automatic(0) or Manual(1) transmission", offset=0.5)
stripchart(mtcars$mpg~mtcars$am, method="stack",pch=c(19),col=c("blue","green"), xlab="Miles Per Gallon (MPG)", ylab="Transmission",  main="Miles Per Gallon vs. \nAutomatic(0) or Manual(1) transmission", offset=0.5)
0.915^2
dbinom(100,1,.95)
(1 - 0.12)^4
1 - (1 - 0.12)^4
(248.3 - 244.8)/2.33
(248.3 - 244.8)
195528-1627
1627/2
193901/828
813.5 / 234.18
13/15
.24*(1 - 0.24)/3226
(.24*(1 - 0.24)/3226)^(0.5)
(.2*(1 - 0.2)/3226)^(0.5)
46 * 112 / 625
.05*.93
.03*.95
0.0465 / (0.0465+0.0285)
1- ((3819.99/15079.02)*(251/(251-8)))
26/30
install.packages("pander")
```{r echo=FALSE, fig.height=4, fig.width=5}
plot(mtcars$wt, simplelm$residuals, pch=19, xlab="Weight", ylab="Residuals")
simplelm <- lm(mtcars$mpg ~ mtcars$trans)
data(mtcars)
mtcars$trans <- "auto" ; mtcars$trans[mtcars$am == 1] <- "manual"
mtcars$trans <- as.factor(mtcars$trans)
roundedmpg <- round(mtcars$mpg)
stripchart(roundedmpg~mtcars$trans, method="stack", pch=c(19),col=c("blue","green"), xlab="Miles Per Gallon (MPG)", ylab="Transmission",  main="Miles Per Gallon vs. \nAutomatic or Manual transmission", offset=0.5, frame.plot=F, ylim=c(0.5,2.5))
simplelm <- lm(mtcars$mpg ~ mtcars$trans)
complexlm <- lm(mtcars$mpg ~ mtcars$trans + mtcars$hp + mtcars$wt + mtcars$vs)
str(complexlm)
print(summary(complexlm)$call)
population = rnorm(1000)
set.seed(783)
population <- rnorm(1000)
nonBootstrapSamples <- numeric(1000)
nonBootstrapSamples <- mean(sample(100,population,replace=FALSE))
nonBootstrapSamples <- numeric(1000)
nonBootstrapSamples <- apply(mean(sample(100,population,replace=FALSE)))
nonBootstrapSamples <- numeric(1000)
nonBootstrapSamples <- apply(nonBootstrapSamples, mean(sample(100,population,replace=FALSE)))
nonBootstrapSamples <- apply(nonBootstrapSamples, FUN=mean(sample(100,population,replace=FALSE)))
nonBootstrapSamples <- numeric(1000)
nonBootstrapSamples <- sapply(nonBootstrapSamples, FUN=mean(sample(100,population,replace=FALSE)))
nonBootstrapSamples <- replicate(1000, FUN=mean(sample(100,population,replace=FALSE)))
nonBootstrapSamples <- replicate(1000, expr=mean(sample(100,population,replace=FALSE)))
head(nonBootstrapSamples)
mean(sample(100,population,replace=FALSE))
nonBootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=FALSE)))
head(nonBootstrapSamples)
set.seed(783)
population <- rnorm(1000)
print(paste("True population mean is", mean(population)))
nonBootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=FALSE)))
bootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=TRUE)))
samplenumber <- 1:1000
nonBootstrapMeanOfMeans <- cumsum(nonBootstrapSamples)/samplenumber
bootstrapMeanOfMeans <- cumsum(bootstrapSamples)/samplenumber
set.seed(783)
population <- rnorm(1000)
print(paste("True population mean is", mean(population)))
nonBootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=FALSE)))
bootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=TRUE)))
samplenumber <- 1:1000
nonBootstrapMeanOfMeans <- cumsum(nonBootstrapSamples)/samplenumber
bootstrapMeanOfMeans <- cumsum(bootstrapSamples)/samplenumber
plot(samplenumber, nonBootstrapMeanOfMeans, type="l", col="red")
lines(samplenumber, bootstrapMeanOfMeans, type="l", col="blue")
set.seed(783)
population <- rnorm(1000)
print(paste("True population mean is", mean(population)))
nonBootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=FALSE)))
bootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=TRUE)))
samplenumber <- 1:1000
nonBootstrapMeanOfMeans <- cumsum(nonBootstrapSamples)/samplenumber
bootstrapMeanOfMeans <- cumsum(bootstrapSamples)/samplenumber
plot(samplenumber, nonBootstrapMeanOfMeans, type="l", col="red", ylim(-1,1))
lines(samplenumber, bootstrapMeanOfMeans, type="l", col="blue")
abline(v=mean(population))
set.seed(783)
population <- rnorm(1000)
print(paste("True population mean is", mean(population)))
nonBootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=FALSE)))
bootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=TRUE)))
samplenumber <- 1:1000
nonBootstrapMeanOfMeans <- cumsum(nonBootstrapSamples)/samplenumber
bootstrapMeanOfMeans <- cumsum(bootstrapSamples)/samplenumber
plot(samplenumber, nonBootstrapMeanOfMeans, type="l", col="red", ylim(-1,1))
lines(samplenumber, bootstrapMeanOfMeans, type="l", col="blue")
abline(h=mean(population))
set.seed(783)
population <- rnorm(1000)
print(paste("True population mean is", mean(population)))
nonBootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=FALSE)))
bootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=TRUE)))
samplenumber <- 1:1000
nonBootstrapMeanOfMeans <- cumsum(nonBootstrapSamples)/samplenumber
bootstrapMeanOfMeans <- cumsum(bootstrapSamples)/samplenumber
plot(samplenumber, nonBootstrapMeanOfMeans, type="l", col="red", ylim=c(-1,1))
lines(samplenumber, bootstrapMeanOfMeans, type="l", col="blue")
abline(h=mean(population))
set.seed(783)
population <- rnorm(1000)
print(paste("True population mean is", mean(population)))
nonBootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=FALSE)))
bootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=TRUE)))
samplenumber <- 1:1000
nonBootstrapMeanOfMeans <- cumsum(nonBootstrapSamples)/samplenumber
bootstrapMeanOfMeans <- cumsum(bootstrapSamples)/samplenumber
plot(samplenumber, nonBootstrapMeanOfMeans, type="l", col="red", ylim=c(min(min(nonBootstrapMeanOfMeans),min(bootstrapMeanOfMeans)),max(max(nonBootstrapMeanOfMeans),max(bootstrapMeanOfMeans))))
lines(samplenumber, bootstrapMeanOfMeans, type="l", col="blue")
abline(h=mean(population))
set.seed(783)
population <- rnorm(1000)
print(paste("True population mean is", mean(population)))
nonBootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=FALSE)))
bootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=TRUE)))
samplenumber <- 1:1000
nonBootstrapMeanOfMeans <- cumsum(nonBootstrapSamples)/samplenumber
bootstrapMeanOfMeans <- cumsum(bootstrapSamples)/samplenumber
plot(samplenumber, nonBootstrapMeanOfMeans, type="l", col="red", ylim=c(min(min(nonBootstrapMeanOfMeans),min(bootstrapMeanOfMeans)),max(max(nonBootstrapMeanOfMeans),max(bootstrapMeanOfMeans))), ylab="Mean of sample means")
lines(samplenumber, bootstrapMeanOfMeans, type="l", col="blue")
abline(h=mean(population))
text(400, 0, labels="non-bootstrap", col="red")
text(400, -.1, labels="bootstrap", col="blue")
set.seed(783)
population <- rnorm(1000)
print(paste("True population mean is", mean(population)))
nonBootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=FALSE)))
bootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=TRUE)))
samplenumber <- 1:1000
nonBootstrapMeanOfMeans <- cumsum(nonBootstrapSamples)/samplenumber
bootstrapMeanOfMeans <- cumsum(bootstrapSamples)/samplenumber
plot(samplenumber, nonBootstrapMeanOfMeans, type="l", col="red", ylim=c(min(min(nonBootstrapMeanOfMeans),min(bootstrapMeanOfMeans)),max(max(nonBootstrapMeanOfMeans),max(bootstrapMeanOfMeans))), ylab="Mean of sample means")
lines(samplenumber, bootstrapMeanOfMeans, type="l", col="blue")
abline(h=mean(population))
text(400, 0, labels="non-bootstrap", col="red")
text(400, -.05, labels="bootstrap", col="blue")
set.seed(783)
population <- rnorm(1000)
print(paste("True population mean is", mean(population)))
nonBootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=FALSE)))
bootstrapSamples <- replicate(1000, expr=mean(sample(population,100,replace=TRUE)))
samplenumber <- 1:1000
nonBootstrapMeanOfMeans <- cumsum(nonBootstrapSamples)/samplenumber
bootstrapMeanOfMeans <- cumsum(bootstrapSamples)/samplenumber
plot(samplenumber, nonBootstrapMeanOfMeans, type="l", col="red", ylim=c(min(min(nonBootstrapMeanOfMeans),min(bootstrapMeanOfMeans)),max(max(nonBootstrapMeanOfMeans),max(bootstrapMeanOfMeans))), ylab="Mean of sample means")
lines(samplenumber, bootstrapMeanOfMeans, type="l", col="blue")
abline(h=mean(population))
text(400, 0, labels="non-bootstrap", col="red")
text(400, -.05, labels="bootstrap", col="blue")
text(800, -.03, labels="population mean", cex=0.7)
data(iris)
str(iris)
iris$Sepal.Length.Category <- cut(iris$Sepal.Length, breaks=c(4,5.2,6.1,7.0,8))
iris$Sepal.Width.Category <- cut(iris$Sepal.Width, breaks=c(2,2.5,3.0,3.6,4.5))
table(iris$Species, iris$Sepal.Length.Category)
iris$Sepal.Length.Category <- cut(iris$Sepal.Length, breaks=c(4,5.2,6.1,7.0,8), right = FALSE)
iris$Sepal.Width.Category <- cut(iris$Sepal.Width, breaks=c(2,2.5,3.0,3.6,4.5), right = FALSE)
table(iris$Species, iris$Sepal.Length.Category)
table(iris$Species, iris$Sepal.Width.Category)
prop.table(table(iris$Species, iris$Sepal.Length.Category))
library(jpeg)
library(reshape2)
library(grDevices)
myurl <- "https://farm5.staticflickr.com/4068/4523001496_3b63569b9a_o_d.jpg"
z <- tempfile()
download.file(myurl,z,mode="wb")
dataimage <- readJPEG(z)
file.remove(z) # cleanup
width=1600
height=485
colnames(dataimage) <- 1:width
rownames(dataimage) <- 1:height
bl <- dataimage[,,3]
blp <- melt(bl)
names(blp) <- c("r","c","blue")
km <- kmeans(blp$blue, 2)
plot(blp$c, blp$r, col = km$cluster, main="difference", ylim=c(0,height), xlim=c(0,width))
install.packages("jpeg")
library(jpeg)
library(reshape2)
library(grDevices)
myurl <- "https://farm5.staticflickr.com/4068/4523001496_3b63569b9a_o_d.jpg"
z <- tempfile()
download.file(myurl,z,mode="wb")
dataimage <- readJPEG(z)
file.remove(z) # cleanup
width=1600
height=485
colnames(dataimage) <- 1:width
rownames(dataimage) <- 1:height
bl <- dataimage[,,3]
blp <- melt(bl)
names(blp) <- c("r","c","blue")
km <- kmeans(blp$blue, 2)
plot(blp$c, blp$r, col = km$cluster, main="difference", ylim=c(0,height), xlim=c(0,width))
myurl <- "http://farm5.staticflickr.com/4068/4523001496_3b63569b9a_o_d.jpg"
z <- tempfile()
download.file(myurl,z,mode="wb")
dataimage <- readJPEG(z)
file.remove(z) # cleanup
width=1600
height=485
colnames(dataimage) <- 1:width
rownames(dataimage) <- 1:height
bl <- dataimage[,,3]
blp <- melt(bl)
names(blp) <- c("r","c","blue")
km <- kmeans(blp$blue, 2)
plot(blp$c, blp$r, col = km$cluster, main="difference", ylim=c(0,height), xlim=c(0,width))
library(jpeg)
library(reshape2)
library(grDevices)
myurl <- "http://farm4.staticflickr.com/3347/3412593356_0e3b095fa8_o_d.jpg"
z <- tempfile()
download.file(myurl,z,mode="wb")
dataimage <- readJPEG(z)
file.remove(z) # cleanup
width=1022
height=736
colnames(dataimage) <- 1:width
rownames(dataimage) <- height:1 # picture coords reversed from R
colrs <- dataimage[,,1]#red is 1, green 2, blue 3
mcolrs <- melt(colrs)
names(mcolrs) <- c("r","c","red")
km <- kmeans(mcolrs$red, 2)
plot(mcolrs$c, mcolrs$r, col = mcolrs$cluster, main="difference", ylim=c(0,height), xlim=c(0,width))
mcolrs$km <- kmeans(mcolrs$red, 2)$cluster
table(mcolrs$km)
mcolrs$km <- kmeans(mcolrs$red, 2)$cluster
c1 <- mcolrs[mcolrs$km == 1]
c2 <- mcolrs[mcolrs$km == 2]
top1 <- aggregate(c1$r, by=list(c1$c), max)
c1 <- mcolrs[mcolrs$km == 1,]
c2 <- mcolrs[mcolrs$km == 2,]
top1 <- aggregate(c1$r, by=list(c1$c), max)
str(top1)
top2 <- aggregate(c2$r, by=list(c2$c), max)
topboth <- merge(top1,top2, by="Group.1")
str(topboth)
topboth$minline <- min(topboth$x.x, topboth$x.y)
head(topboth)
plot(topboth$Group1.1, topboth$minline, type="l")
plot(topboth$Group.1, topboth$minline, type="l")
top1 <- aggregate(c1$r, by=list(c1$c), max)
top2 <- aggregate(c2$r, by=list(c2$c), max)
topboth <- merge(top1,top2, by="Group.1")
topboth$minline <- min(topboth$x.x, topboth$x.y)
head(topboth)
topboth$minline <- min(c(topboth$x.x, topboth$x.y))
head(topboth)
topboth <- merge(top1,top2, by="Group.1")
topboth$minline <- apply(topboth[,2:3],1,min)
head(topboth)
plot(topboth$Group.1, topboth$minline, type="l")
data(iris)
iris$Sepal.Length.Category <- cut(iris$Sepal.Length, breaks=c(4,5.2,6.1,7.0,8), right = FALSE)
iris$Sepal.Width.Category <- cut(iris$Sepal.Width, breaks=c(2,2.5,3.0,3.6,4.5), right = FALSE)
observedPropTbl <- prop.table(table(iris$Sepal.Width.Category, iris$Sepal.Length.Category))
expectedPropTbl <- chisq.test(observedPropTbl)$expected
sum((observedPropTbl-expectedPropTbl)^2/expectedPropTbl)
sum(Op(Op/Ep -1) - (Op-Ep))
iris$Sepal.Length.Category <- cut(iris$Sepal.Length, breaks=c(4,5.2,6.1,7.0,8), right = FALSE)
iris$Sepal.Width.Category <- cut(iris$Sepal.Width, breaks=c(2,2.5,3.0,3.6,4.5), right = FALSE)
Op <- prop.table(table(iris$Sepal.Width.Category, iris$Sepal.Length.Category))
Ep <- chisq.test(Op)$expected
sum((Op-Ep)^2/Ep)
sum(Op(Op/Ep -1) - (Op-Ep))
sum(Op*(Op/Ep -1) - (Op-Ep))
sum(Op*(Op/Ep -1)
)
chisq.test(Op)
devtools::install_github("hadley/pryr")
devtools::install_github("hadley/lineprof")
a <- matrix(c(41,66,90,57,56,60,61,72,79,69,73,72,63,52,88,62,83,80), 3, 6)
a
a <- matrix(c(41,66,90,57,56,60,61,72,79,69,73,72,63,52,88,62,83,80), 6, 3)
a
a <- t(matrix(c(41,66,90,57,56,60,61,72,79,69,73,72,63,52,88,62,83,80), 3, 6))
a
svd(a)
Z,u,C <- svd(x)
c(Z,u,C) <- svd(x)
x <- t(matrix(c(41,66,90,57,56,60,61,72,79,69,73,72,63,52,88,62,83,80), 3, 6))
svd(x)
#or if you prefer
c(Z,u,C) <- svd(x)
ds = sum(x * t(x))
ds = sum(x .* t(x))
ds = sum(x * x)
ds
y =apply(x,2, function(x){ x-mean(x)})
y
x
svd(y)
y*y
318/76
y*(y/4)
y*(y/6)
setwd("~/Documents/gitviagithub/onevoteweb")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library("shinyapps", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
deployApp()
